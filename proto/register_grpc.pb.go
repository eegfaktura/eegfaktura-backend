// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/register.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegisterEegService_Register_FullMethodName  = "/at.ourproject.RegisterEegService/register"
	RegisterEegService_EegExists_FullMethodName = "/at.ourproject.RegisterEegService/eegExists"
)

// RegisterEegServiceClient is the client API for RegisterEegService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterEegServiceClient interface {
	// Sends a greeting
	Register(ctx context.Context, in *RegisterEegRequest, opts ...grpc.CallOption) (*RegisteredEegReply, error)
	EegExists(ctx context.Context, in *EegRequest, opts ...grpc.CallOption) (*EegResponse, error)
}

type registerEegServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterEegServiceClient(cc grpc.ClientConnInterface) RegisterEegServiceClient {
	return &registerEegServiceClient{cc}
}

func (c *registerEegServiceClient) Register(ctx context.Context, in *RegisterEegRequest, opts ...grpc.CallOption) (*RegisteredEegReply, error) {
	out := new(RegisteredEegReply)
	err := c.cc.Invoke(ctx, RegisterEegService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerEegServiceClient) EegExists(ctx context.Context, in *EegRequest, opts ...grpc.CallOption) (*EegResponse, error) {
	out := new(EegResponse)
	err := c.cc.Invoke(ctx, RegisterEegService_EegExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterEegServiceServer is the server API for RegisterEegService service.
// All implementations must embed UnimplementedRegisterEegServiceServer
// for forward compatibility
type RegisterEegServiceServer interface {
	// Sends a greeting
	Register(context.Context, *RegisterEegRequest) (*RegisteredEegReply, error)
	EegExists(context.Context, *EegRequest) (*EegResponse, error)
	mustEmbedUnimplementedRegisterEegServiceServer()
}

// UnimplementedRegisterEegServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterEegServiceServer struct {
}

func (UnimplementedRegisterEegServiceServer) Register(context.Context, *RegisterEegRequest) (*RegisteredEegReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegisterEegServiceServer) EegExists(context.Context, *EegRequest) (*EegResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EegExists not implemented")
}
func (UnimplementedRegisterEegServiceServer) mustEmbedUnimplementedRegisterEegServiceServer() {}

// UnsafeRegisterEegServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterEegServiceServer will
// result in compilation errors.
type UnsafeRegisterEegServiceServer interface {
	mustEmbedUnimplementedRegisterEegServiceServer()
}

func RegisterRegisterEegServiceServer(s grpc.ServiceRegistrar, srv RegisterEegServiceServer) {
	s.RegisterService(&RegisterEegService_ServiceDesc, srv)
}

func _RegisterEegService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterEegServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterEegService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterEegServiceServer).Register(ctx, req.(*RegisterEegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterEegService_EegExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterEegServiceServer).EegExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterEegService_EegExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterEegServiceServer).EegExists(ctx, req.(*EegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterEegService_ServiceDesc is the grpc.ServiceDesc for RegisterEegService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterEegService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "at.ourproject.RegisterEegService",
	HandlerType: (*RegisterEegServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register",
			Handler:    _RegisterEegService_Register_Handler,
		},
		{
			MethodName: "eegExists",
			Handler:    _RegisterEegService_EegExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/register.proto",
}
